{"posts":[{"title":"利用 Caddy 部署 Trojan 服务端","text":"准备工作参见此文章。 开始部署 安装 Caddy 如果不想让伪装地址指向本机，可以不用安装。 安装 Trojan [文档]bash1sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)\" 配置 Caddy 除特别说明，否则文章中所有带 [ ] 号的文本均需连 [ ] 号依据其中提示替换。 Caddy 成功安装后，修改 Caddyfile 为以下内容： 我们需要让出 443 端口给 Trojan，所以在 Caddyfile 中显式指定了端口。 /etc/caddy/Caddyfile12345[域名]:80 { tls [邮箱] root * /usr/share/caddy # 可修改为其他内容 file_server} 在以上文件中，我们在自己的域名（需指向服务器）的 80 端口建立了一个网站（也可以不建立或进行反向代理），用于 Trojan 的伪装。 反向代理可以这样配置： /etc/caddy/Caddyfile1234[域名]:80 { tls [邮箱] reverse_proxy [地址]} 如果想让伪装指向其他地址，可以不用配置。 配置 Trojan [文档]将配置文件修改为如下内容： /usr/local/etc/trojan/config.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849{ \"run_type\": \"server\", \"local_addr\": \"0.0.0.0\", \"local_port\": 443, \"remote_addr\": \"127.0.0.1\", //这是伪装地址，默认无需更改，未配置 Caddy 的需要更改 \"remote_port\": 80, \"password\": [ \"password1\", //此处填写密码，可以只留下一个 \"password2\" ], \"log_level\": 1, \"ssl\": { \"cert\": \"/var/lib/caddy/.local/share/caddy/certificates/acme-v02.api.letsencrypt.org-directory/[域名]/[域名].crt\", \"key\": \"/var/lib/caddy/.local/share/caddy/certificates/acme-v02.api.letsencrypt.org-directory/[域名]/[域名].key\", \"key_password\": \"\", \"cipher\": \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\", \"cipher_tls13\": \"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\", \"prefer_server_cipher\": true, \"alpn\": [ \"http/1.1\", \"h2\" ], \"reuse_session\": true, \"session_ticket\": false, \"session_timeout\": 600, \"plain_http_response\": \"\", \"curves\": \"\", \"dhparam\": \"\" }, \"tcp\": { \"prefer_ipv4\": false, \"no_delay\": true, \"keep_alive\": true, \"reuse_port\": false, \"fast_open\": false, \"fast_open_qlen\": 20 }, \"mysql\": { \"enabled\": false, \"server_addr\": \"127.0.0.1\", \"server_port\": 3306, \"database\": \"trojan\", \"username\": \"trojan\", \"password\": \"\", \"key\": \"\", \"cert\": \"\", \"ca\": \"\" }} 启动服务 配置后，服务均会自动启动。 bash123sudo systemctl reload caddysudo systemctl enable trojansudo systemctl start trojan 部署完成Enjoy it!","link":"/2022/01/27/Caddy-Trojan/"},{"title":"利用 Caddy 部署使用 Websocket 的 V2Ray Vmess 服务端，并搭建一个文件服务器","text":"灵感源自 https://blog.kallydev.com/docs/technical-notes/server/deploy-v2ray-with-docker/，有修改。 部署说明 仅用于参考，并非硬性要求，需按照实际情况自行更改。 服务器为腾讯云轻量应用服务器（海外地区）； 服务器操作系统为 Ubuntu 20.04 LTS； 在海外服务商购买的域名（例如 GoDaddy、Google Domain）。 部署步骤准备工作创建用户 除特别说明，否则文章中所有带 [ ] 号的文本均需连 [ ] 号依据其中提示替换。 bash12sudo useradd -s /bin/bash -m [用户名]sudo passwd [用户名] 配置新用户bash1sudo visudo 在文件末尾找到以下内容： 123#includedir /etc/sudoers.dlighthouse ALL=(ALL) NOPASSWD: ALLubuntu ALL=(ALL:ALL) NOPASSWD: ALL 修改为： 12#includedir /etc/sudoers.d[用户名] ALL=(ALL) NOPASSWD: ALL 登录到新用户按 Ctrl + D 退出登录后重新登录至新用户。参考方法（Windows、Linux、MacOS终端均可，Android需要一个终端模拟器）： bash1ssh [用户名]@[服务器IP] 删除默认用户bash12sudo userdel -r ubuntusudo userdel -r lighthouse 卸载监控组件（可选）[文档] 本操作 非必要 执行，但 建议 执行。 卸载 BaradAgent登录云服务器后，执行以下命令，进入 BaradAgent 安装目录。 bash1cd /usr/local/qcloud/monitor/barad/admin 执行以下命令，卸载 BaradAgent。该命令不显示结果，如果不存在 /usr/local/qcloud/monitor/barad 文件夹，则说明卸载成功。 bash1./uninstall.sh BaradAgent 上报云服务器部分指标数据，卸载 BaradAgent 后会停止数据上报。Sgagent 基本占用极少的内存，您也可以参考下列步骤卸载 Sgagent。 卸载 Sgagent执行以下命令，进入 Sgagent 安装目录。 bash1cd /usr/local/qcloud/stargate/admin 执行以下命令，卸载 Sgagent。该命令不显示结果，您可以执行 crontab -l |grep stargate 命令查看是否有计划任务，若无计划任务，则说明卸载成功。 bash1./uninstall.sh 更新并升级所有软件包bash12sudo apt updatesudo apt upgrade -y 由于软件包比较多，需等待一段时间，并关注屏幕上的选项。 开始部署安装安装 Caddy [文档]bash12345sudo apt install -y debian-keyring debian-archive-keyring apt-transport-httpscurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo tee /etc/apt/trusted.gpg.d/caddy-stable.asccurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.listsudo apt updatesudo apt install caddy 安装 V2Ray [文档]bash1sudo bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) 配置配置 V2Raybash1sudo nano /usr/local/etc/v2ray/config.json 替换为以下内容 [文档]： /usr/local/etc/v2ray/config.json1234567891011121314151617181920212223{ \"inbound\": { \"port\": [任意 0-65535 的端口，推荐避开 80 与 443], \"listen\": \"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [{ \"id\": \"[任意 UUID]\", \"alterId\": [任意 0-65536 的数字] }] }, \"streamSettings\": { \"network\": \"ws\", \"wsSettings\": { \"path\": \"[任意用于 WebSocket 的路径，如：/v2ray]\" } } }, \"outbound\": { \"protocol\": \"freedom\", \"settings\": {} }} 按 Ctrl + X 退出，按 Y 保存，按 Enter 确认。 配置 Caddy1sudo nano /etc/caddy/Caddyfile 替换为以下内容： /etc/caddy/Caddyfile123456[域名] { tls [任意电子邮箱地址] reverse_proxy [WebSocket 路径] localhost:[端口] { header_up -Origin }} 绑定域名更换域名服务器（可选）添加 DNS 解析记录为域名添加一条指向服务器 IP 地址的 A 记录。 启动服务至此，代理已经配置完毕，现在重载 Caddy 并启动 V2Ray。 bash12sudo systemctl start v2raysudo systemctl reload caddy 客户端配置下载客户端我使用的客户端为 Clash。 编辑配置文件Clash 的配置文件格式为 yaml ，有严格的缩进规则。 以下为范例： 1234567891011121314151617181920212223242526port: 7890socks-port: 7891redir-port: 7892allow-lan: falsemode: Rulelog-level: infoproxies:- name: \"代理\" type: vmess server: [域名] port: 443 uuid: [UUID] alterId: [alterId] cipher: auto udp: true tls: true network: ws ws-opts: - path: [path]proxy-groups:- name: \"PROXY\" type: select proxies: - \"代理\" 推荐添加一些代理规则，如：https://github.com/Loyalsoldier/clash-rules。 导入配置文件增强体验的额外配置腾讯云的轻量应用服务器用作代理绰绰有余，所以我们还可以部署一些额外的东西。 修改 Caddy 配置文件在 Caddyfile 开头加入以下内容： /etc/caddy/Caddyfile123456*.[域名] { tls [邮箱]}[域名] { tls [邮箱]} 再在你想要的任意域名下加入file_server。 file_server 中加入（可选项）： root [自定义根目录] browse #启用索引 修改后，我的 Caddyfile 是这样的： /etc/caddy/Caddyfile123456789101112131415161718192021222324252627*.[域名] { tls [邮箱]}[域名] { tls [邮箱]}files.[域名] { basicauth [想要密码限制的目录（后加 *）/ 文件，也可选择删除，全部限制] { [用户名] [密码] } file_server { root [root1] browse }}proxy.[域名] { reverse_proxy /v2ray localhost:10000 { header_up -Origin } file_server { root [root2] }} 其中的 [密码] 需要这样生成： bash1caddy hash-password 于是我把 Clash 配置文件放到 [root2] 中并在客户端配置从 Url 导入，从 proxy.[域名] 访问；把要分享的文件放在 [root1] ，其中有两个目录：Public 和 Private ，密码限制 Private 目录。 安装、配置 VsFTPd部署完成至此，你的代理服务器、文件服务器都已搭建完毕，享受吧！","link":"/2022/01/27/Caddy-V2Ray/"},{"title":"利用抓包下载钉钉直播回放","text":"更新说明本文首先发布在 CSDN，本次更新使文章表述更加严谨规范，且新增了一些链接。 引 最近在上网课，想在网上上传直播录像或者剪辑一些搞笑的片段上传。 但是当我打开电脑想点“下载”的时候…… 这个方法适用于 Android、Windows，因为我只在这两个平台测试过。Android 稍微麻烦一点，Windows 则需要一些工具。 抓包准备工作安装好抓包软件 Fiddler。 开启 HTTPS 抓取 Android 同理，下载好你喜欢的抓包工具并安装根证书。 对钉钉进行抓包打开钉钉窗口，按住工具栏上标有 Any Process 字样的按钮并拖动到钉钉窗口上： Android 同理，选择程序钉钉，最好设置过滤域名 alicdn.com，以便更快地筛选。 在软件左下方命令框输入 stop 和 cls： 然后在直播回放打开前输入 start： 以启动抓包。 也可以再加一条 bold m3u8?，可能会出现神奇的效果。 当回放加载完成（有画面）后输入 stop 以停止抓包。 Android 同理，清除列表，开启抓包，有画面就返回抓包软件并停止抓包。 寻找包寻找环节，最好确保只打开一次回放，否则可能会出现重复包。 输入 @alicdn.com 和 select vnd.apple.mpegurl： 这样 Fiddler 就会自动定位到符合要求的包。 双击寻找到的包，转向窗口右边： 点击下方相应部分的的 TextView 选项卡应该能看到 m3u8 格式的文件。 回到左边，右键这个包选择复制 Url： 在 Android 上需要找域名为 alicdn.com 的 10KB 左右的 HTTP 请求。 下载工具准备此步骤可能需要在 Windows 上才能很好地进行。 本文中，我们使用 N_m3u8DL-CLI 来下载视频。本文更新时我寻找到了同作者制作的跨平台 N_m3u8DL-RE，读者可以自行尝试。 下载最新版的一个 zip 文件，里面包含分片合并工具和一个可视化程序： 视频下载设置好参数并运行： 完成合并完成后就可以在 Downloads 目录下找到 mp4 文件啦！","link":"/2020/02/26/Download-DingTalk-Videos/"},{"title":"无需本地环境，搭建一个个人博客网站","text":"前言随着互联网的进步，越来越多的操作得以在网上进行。今天我们来做一个静态博客“云玩家”。 搭建创建仓库首先，在线上创建一个 Git 仓库。 创建之后，复制它的 SSH 地址。 注册 CloudStudio访问 https://cloudstudio.net 并注册一个账号（建议使用 GitHub 方式）。 新建一个 Ubuntu 的工作空间并设置仓库地址。 配置仓库打开终端，输入如下内容以安装 Node.js [文档]： bash12curl -fsSL https://deb.nodesource.com/setup_17.x | bashapt-get install -y nodejs 安装完成后，输入以下内容以更新 Npm 并安装 Hexo： bash12npm install -g npmnpm install -g hexo 输入以下内容进行初始化： bash1234567mkdir hexocd hexohexo initcd ..mv hexo/* .mv hexo/.* .rmdir hexo 以上命令新建了一个空 hexo 目录（ hexo 初始化需要空目录），并在该目录执行初始化，初始化完成后将内容移回当前目录。 更改主题我们使用 Icarus 主题。 bash1234npm install -S hexo-theme-icarusnpm uninstall hexo-theme-landscapenpm uninstall hexo-renderer-ejs # https://github.com/ppoffice/hexo-theme-icarus/issues/855npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 修改配置文件： _config.yml &gt;folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 网站标题subtitle: 副标题description: 描述keywords:* 关键词* 关键词 author: 作者 language: zh-CN timezone: Asia/Shanghai# URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: http://example.compermalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:trailing_index: true # Set to false to remove trailing 'index.html' from permalinkstrailing_html: true # Set to false to remove trailing '.html' from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link:enable: true # Open external links in new tabfield: site # Apply to the whole siteexclude: ''filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:enable: trueline_number: trueauto_detect: falsetab_replace: ''wrap: truehljs: falseprismjs:enable: falsepreprocess: trueline_number: truetab_replace: ''# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path: ''per_page: 10order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports 'mtime', 'date', 'empty'updated_option: 'mtime'# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type: '' 还需要对主题进行一次初始化，输入： bash1hexo server 完成后，按下 Ctrl + C 。 提交更改切换到版本管理选项卡，提交更改并推送。 至此，我们可以暂时关闭 CloudStudio 了。 打开 GitHub Web Editor打开仓库，按下 . 键即可打开。 继续配置继续修改主题配置文件（由于主题配置文件更加复杂，所以没有编写示例）。 与 GitHub Pages 集成最后，我们只需要新建一个 GitHub Action 就可以自动化部署了。 在仓库根目录新建 .github/workflows/pages.yml 文件，填入以下内容： .github/workflows/pages.yml1234567891011121314151617name: Github Pageson: pushjobs: publish: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: '17.4.0' - run: npm install - run: npm run-script build - uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public force_orphan: true 提交，稍作等待后来到仓库 Settings - Pages，选择多出来的 gh-pages 分支。 完成 今后想进行写作，可以直接前往 GitHub Web Editor，在 source/_posts 目录新建文章或在 CloudStudio 运行 hexo new '文章名' 新建文章。 CloudStudio 有每日工作空间使用时长限额 2 小时。 以下是新建的默认文章格式，供参考： new-post.md123456---title: 标题date: YYYY-MM-DD hh:mm:ss---正文 建议仔细阅读 Hexo 文档和 Icarus用户指南。 可以使用 Forestry 进行更加方便舒适的内容管理，在本文中不展开讨论。","link":"/2022/01/28/Make-Blog-Website/"},{"title":"利用 Nginx 部署支持 SNI 转发的 Trojan 服务端以及踩坑记录","text":"前言之前使用 Caddy 部署的服务端，到现在出现了一个问题：不具备部署多个网络服务的能力。 我尝试过使用反向代理，但无论如何都不能成功连接。正当我一筹莫展之时，我发现了这篇文章。啪的一下很快啊，我马上蹦了起来开始操作。 部署 Trojan 的教程可以查看这篇文章。 由于部署过程中有很多坑，为引导读者避坑，本文将以我的操作顺序以及问题的解决过程来记录，所以如果你只是想知道部署方法，请先通读文章。 安装 Nginx一般情况下，只需执行以下命令： bash1sudo apt install nginx 但是我比较“喜欢”绕（搜索关键词不对），于是我在官网上查到了完整的安装方法： bash1234sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyringcurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/nullgpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg 确保输出为： 123pub rsa2048 2011-08-19 [SC] [expires: 2024-06-14] 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62uid nginx signing key &lt;signing-key@nginx.com&gt; 如果不是就删掉 /usr/share/keyrings/nginx-archive-keyring.gpg 再来。 下一步就是安装了： 主要版并不是不稳定，按照官网说法，只是不那么稳定而已。我选择的是主要版。 官网没写怎么换分支，我也不会。 稳定版 主要版 bash123echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\ | sudo tee /etc/apt/sources.list.d/nginx.list bash123echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\" \\ | sudo tee /etc/apt/sources.list.d/nginx.list bash12sudo apt updatesudo apt install nginx 安装 Certbot文档：https://certbot.eff.org/instructions?ws=nginx&amp;os=ubuntufocal 安装 Snapd 的方法： bash1sudo apt install snapd bash12sudo snap install --classic certbotsudo ln -s /snap/bin/certbot /usr/bin/certbot 配置安装之后，噩梦就开始了。 我开始到处学习 Nginx 的配置文件，最后我是这么做的： 首先删除一个默认的配置文件：/etc/nginx/conf.d/default.conf 然后编辑配置文件： /etc/nginx/nginx.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566user nginx;worker_processes auto;error_log /var/log/nginx/error.log notice;pid /var/run/nginx.pid;events { worker_connections 1024;}# 这部分是原文中复制过来的stream { # 这里就是 SNI 识别，将域名映射成一个配置名 map $ssl_preread_server_name $backend_name { [Trojan 与伪装服务器共用的域名] trojan; # 域名都不匹配情况下的默认值 default web; } # web，配置转发详情 upstream web { server 127.0.0.1:80; } # trojan，配置转发详情 upstream trojan { server 127.0.0.1:[Trojan 端口]; } # 监听 443 并开启 ssl_preread server { listen 443 reuseport; listen [::]:443 reuseport; proxy_pass $backend_name; ssl_preread on; }}http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; keepalive_timeout 65; include /etc/nginx/conf.d/*.conf; server { server_name [Trojan 与伪装服务器共用的域名]; location / { root /usr/share/nginx/html/; index index.html index.htm; } listen 80; }} 编辑 Trojan 的配置文件 /usr/local/etc/trojan/config.json ，把 local_port 修改一下，重启。 bash1sudo systemctl restart trojan 注册系统服务，启动 Nginx： bash123sudo nginx -s stopsudo systemctl enable nginxsudo systemctl start nginx 申请证书： bash1sudo certbot --nginx Certbot 会从配置文件中发现你配置的域名并自动修改配置文件，配置 SSL 。 配置完成后，再次修改配置文件： /etc/nginx/nginx.conf1234567891011121314server { server_name [域名]; location / { root /usr/share/nginx/html/; index index.html index.htm; } listen 80 ssl; ssl_certificate /etc/letsencrypt/live/[域名]/fullchain.pem; # 记下这两个路径 ssl_certificate_key /etc/letsencrypt/live/[域名]/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;} bash1sudo nginx -s reload 编辑 Trojan 的配置文件 /usr/local/etc/trojan/config.json ，把证书路径修改一下，重启。 bash1sudo systemctl restart trojan 这时我们就可以用原来的客户端配置连接到代理了。 作为一个合格的懒狗自动化玩家，我们肯定是要测试一下自动更新 SSL 的可靠程度。（怕自己配置出错） bash1sudo certbot renew --dry-run 但我们竟收到了 400 错误！ 打开浏览器： 按照我们配置 Caddy 的经验，这样配置应该没有错。 上网搜索，怎么配怎么不对：有说 ssl 后加 default 的，有说端口 443 加 ssl 而 80 不加的，可行的就第一种，但也失败了。（说是失败，不如说是不适合我们的需求） 到这里，我们就止步不前了，我也尝试过搜索 Nginx 取消这个功能的办法，无奈没有搜到。 于是我开始翻看我看过的各种文章，果然还是最开始给我灵感的文章又给了我灵感。文章中的转发设置中并没有转到 80 端口，而这个问题产生的原因是使用 HTTP 协议访问了启用了 SSL 的 80 端口，我们再新开一个端口，用于 SSL 连接不就行了吗？ 开干： /etc/nginx/nginx.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980user nginx;worker_processes auto;error_log /var/log/nginx/error.log notice;pid /var/run/nginx.pid;events { worker_connections 1024;}stream { map $ssl_preread_server_name $backend_name { [Trojan 及伪装域名] trojan; default web; } upstream web { server 127.0.0.1:[Web SSL 端口]; } upstream trojan { server 127.0.0.1:[Trojan 端口]; } server { listen 443 reuseport; listen [::]:443 reuseport; proxy_pass $backend_name; ssl_preread on; }}http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf; server { server_name [Trojan 及伪装域名]; location / { root /usr/share/nginx/html/; index index.html index.htm; } listen [Web SSL 端口] ssl; listen 80; ssl_certificate /etc/letsencrypt/live/[*]/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/[*]/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; } server { server_name [其他服务域名]; listen [Web SSL 端口] ssl; listen 80; ssl_certificate /etc/letsencrypt/live/[*]/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/[*]/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; }} 重载 Nginx ，大功告成： bash1sudo nginx -s reload 后记折腾这个花了我一个下午的光阴，这次折腾给我一个启示：思维不能僵化。HTTP 端口不一定是 80 ，HTTPS 端口也不一定是 443 。折腾完后我再次蹦了起来：NB ！并马上打开电脑记录。 本文内容可能与实际情况有些出入（文件内容、实现效果等），但最终结果部分应该不会错。","link":"/2022/02/02/Nginx-Trojan-Website/"}],"tags":[{"name":"技术","slug":"technology","link":"/tags/technology/"},{"name":"Caddy","slug":"caddy","link":"/tags/caddy/"},{"name":"Trojan","slug":"trojan","link":"/tags/trojan/"},{"name":"服务器","slug":"server","link":"/tags/server/"},{"name":"代理","slug":"proxy","link":"/tags/proxy/"},{"name":"GFW","slug":"gfw","link":"/tags/gfw/"},{"name":"V2Ray","slug":"v2ray","link":"/tags/v2ray/"},{"name":"网络","slug":"network","link":"/tags/network/"},{"name":"博客","slug":"blog","link":"/tags/blog/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"}],"categories":[{"name":"技术","slug":"technology","link":"/categories/technology/"}],"pages":[{"title":"404 Not Found","text":"无法访问！我不能给你变出一个页面来！","link":"/404.html"},{"title":"关于","text":"啥也没有，过会再来看看吧！","link":"/about/index.html"}]}